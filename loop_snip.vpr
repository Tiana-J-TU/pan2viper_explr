
field val_ref: Ref

/* Abstract array predicate */
predicate byte_array(st: Ref, len: Int)
    
function lookup(self: Ref, i: Int, len: Int) : Int
    requires acc(byte_array(self, len), wildcard)
    requires 0 <= i
    requires i < len

/* Array encoding inspired by (sourced from Prusti-generated Viper) */
/*
function lookup_pure__$TY$__Array$hardcoded_len$u32$u32$Array$hardcoded_len$u32$$int$$$int$(self: Ref,
  idx: Int): Int
  requires acc(Array$hardcoded_len$u32(self), read$())
  requires 0 <= idx
  requires idx < hardcoded_len
*/

// Permissions
// -- want framing of src heap fragment (partial permissions across all data s.t. no modifications possible)
// -- require exclusive permission to dst heap fragment

define hardcoded_len 128
define loop_unmodified(a, l) 
  forall j: Int :: 0 <= j && j < l ==> (old[pre_lp](lookup(a.val_ref, j, l)) == lookup(a.val_ref, j, l))
define sameupto(a, b, i, l) forall j: Int :: 0 <= j && j < l && j < i ==> lookup(a.val_ref, j, l) == lookup(b.val_ref, j, l)

/* Translation variant I: ignore shared memory (treat as conventional heap accesses) */
method pnk_memcpy(dst: Ref, src: Ref, len: Int) returns (v: Int)
    requires len == hardcoded_len
    // `wildcard` amount always less than currently held -> guaranteed < 1
    requires acc(src.val_ref, 1/2) && acc(byte_array(src.val_ref,len), 1/2)
    requires acc(dst.val_ref, write) && acc(byte_array(dst.val_ref,len), write)   
    
    ensures acc(src.val_ref, 1/2) && acc(byte_array(src.val_ref,len), 1/2)
    ensures acc(dst.val_ref, write) && acc(byte_array(dst.val_ref,len), write)   
    ensures forall j: Int :: (0 <= j && j < len) ==> (old(lookup(src.val_ref, j, len)) ==  lookup(dst.val_ref, j, len))

{
    var i: Int := 0
    var c: Int := 0

    var t: Int := i
    assert 0 <= i

label pre_lp
    while (i < len) 
        invariant 0 <= i 
                  && acc(src.val_ref, 1/2) 
                  && acc(byte_array(src.val_ref, len), 1/2) 
                  && acc(dst.val_ref, write) 
                  && acc(byte_array(dst.val_ref, len), write) 
                  && loop_unmodified(src,len) 
                  && sameupto(src, dst, i, len)
    {   
        t := i // established a temporary variable -- is this necessary?
label pre_ld8
        // bounds check 
        assert 0 <= t && t < len 
        // check permission to read src segment
        assert !(perm(byte_array(src.val_ref, len)) == none)
        // !ld8 c, (src + i);
label post_ld8 
        // variable c updated with value of heap cell
        inhale (c == old[pre_ld8](lookup(src.val_ref, old[pre_ld8](t), len)))
        
label pre_st8
        // bounds check
        assert 0 <= t && t < len
        // check permission to modify
        assert perm(dst.val_ref) == write 
        assert perm(byte_array(dst.val_ref, len)) >= write // Okay ... this is weird
        // What do we want it to mean when we have permission to an abstract predicate?
        // !st8 c, (dst + i);
label post_st8 
        // heap cell updated
        inhale (lookup(dst.val_ref, old[pre_st8](t), len) == old[pre_st8](c))
        inhale (forall j: Int :: 
                  (0 <= j && j < hardcoded_len && !(old[pre_st8](t) == j)) 
                     ==> (old[pre_st8](lookup(dst.val_ref, j, len)) == lookup(dst.val_ref, j, len))
                )
        i := i + 1 // i = i + 1; [translation straightforward]
    }

    // correctness condition might look something like this? 
    // Going to need a better loop invariant to prove this
    /* assert (forall j: Int :: { old[pre_lp](lookup(src.val_ref, j, len)) } 
        (0 <= j && j < hardcoded_len) ==> (old[pre_lp](lookup(src.val_ref, j, len)) ==  lookup(dst.val_ref, j, len))
    ) */
    assert forall j: Int :: (0 <= j && j < len) ==> (old[pre_lp](lookup(src.val_ref, j, len)) ==  lookup(dst.val_ref, j, len))

    /* --------------------------------------------------------- */
    v := 0 // return 0;
    /* --------------------------------------------------------- */

}

// Encoding ideas
// 1 -- abstract array predicates and pure lookup functions 
// 2 -- (non-abstract) recursive array predicates
// 3 -- array domain 
// 4 -- something else

// Model heap changes w/ Viper's inbuilt Seq type
//   -- no mechanism for declaring permissions?